// Generated from ./ANTLR/XCalc.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XCalcLexer extends Lexer {
	public static readonly FN = 1;
	public static readonly NUMBER = 2;
	public static readonly ID = 3;
	public static readonly CONSTANT = 4;
	public static readonly PI = 5;
	public static readonly MINUS = 6;
	public static readonly PLUS = 7;
	public static readonly MULT = 8;
	public static readonly DIV = 9;
	public static readonly POWER = 10;
	public static readonly ROOT = 11;
	public static readonly MODULO = 12;
	public static readonly EQUALS = 13;
	public static readonly LPAREN = 14;
	public static readonly RPAREN = 15;
	public static readonly LBRKT = 16;
	public static readonly RBRKT = 17;
	public static readonly LCURLY = 18;
	public static readonly RCURLY = 19;
	public static readonly PIPE = 20;
	public static readonly COMMA = 21;
	public static readonly AMPERSAND = 22;
	public static readonly GT = 23;
	public static readonly GTE = 24;
	public static readonly LT = 25;
	public static readonly LTE = 26;
	public static readonly NE = 27;
	public static readonly EQ = 28;
	public static readonly WS = 29;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"FN", "NUMBER", "ID", "CONSTANT", "PI", "MINUS", "PLUS", "MULT", "DIV", 
		"POWER", "ROOT", "MODULO", "EQUALS", "LPAREN", "RPAREN", "LBRKT", "RBRKT", 
		"LCURLY", "RCURLY", "PIPE", "COMMA", "AMPERSAND", "GT", "GTE", "LT", "LTE", 
		"NE", "EQ", "DIGIT", "LETTER", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'-'", 
		"'+'", undefined, undefined, undefined, undefined, "'%'", "'='", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'|'", "','", "'&'", "'>'", undefined, 
		"'<'", "'\u2264'", undefined, "'=='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "FN", "NUMBER", "ID", "CONSTANT", "PI", "MINUS", "PLUS", "MULT", 
		"DIV", "POWER", "ROOT", "MODULO", "EQUALS", "LPAREN", "RPAREN", "LBRKT", 
		"RBRKT", "LCURLY", "RCURLY", "PIPE", "COMMA", "AMPERSAND", "GT", "GTE", 
		"LT", "LTE", "NE", "EQ", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XCalcLexer._LITERAL_NAMES, XCalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XCalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XCalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XCalc.g4"; }

	// @Override
	public get ruleNames(): string[] { return XCalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XCalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XCalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XCalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xEA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x05\x02|\n\x02\x03\x03\x06\x03\x7F\n\x03\r\x03\x0E\x03" +
		"\x80\x03\x03\x03\x03\x07\x03\x85\n\x03\f\x03\x0E\x03\x88\v\x03\x05\x03" +
		"\x8A\n\x03\x03\x04\x06\x04\x8D\n\x04\r\x04\x0E\x04\x8E\x03\x04\x05\x04" +
		"\x92\n\x04\x03\x04\x03\x04\x06\x04\x96\n\x04\r\x04\x0E\x04\x97\x07\x04" +
		"\x9A\n\x04\f\x04\x0E\x04\x9D\v\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x05\x06\xA4\n\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x05\v\xB1\n\v\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f" +
		"\xB8\n\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x19\x05\x19\xD5\n\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x03\x1C\x05\x1C\xDE\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03 \x03 \x02\x02\x02!\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x02=\x02\x02?\x02\x1F" +
		"\x03\x02\x07\x05\x02,,\xD9\xD9\u221B\u221B\x04\x0211\xF9\xF9\x03\x022" +
		";\x04\x02C\\c|\x05\x02\v\f\x0E\x0F\"\"\x02\u0103\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x03{\x03\x02" +
		"\x02\x02\x05~\x03\x02\x02\x02\x07\x8C\x03\x02\x02\x02\t\x9E\x03\x02\x02" +
		"\x02\v\xA3\x03\x02\x02\x02\r\xA5\x03\x02\x02\x02\x0F\xA7\x03\x02\x02\x02" +
		"\x11\xA9\x03\x02\x02\x02\x13\xAB\x03\x02\x02\x02\x15\xB0\x03\x02\x02\x02" +
		"\x17\xB7\x03\x02\x02\x02\x19\xB9\x03\x02\x02\x02\x1B\xBB\x03\x02\x02\x02" +
		"\x1D\xBD\x03\x02\x02\x02\x1F\xBF\x03\x02\x02\x02!\xC1\x03\x02\x02\x02" +
		"#\xC3\x03\x02\x02\x02%\xC5\x03\x02\x02\x02\'\xC7\x03\x02\x02\x02)\xC9" +
		"\x03\x02\x02\x02+\xCB\x03\x02\x02\x02-\xCD\x03\x02\x02\x02/\xCF\x03\x02" +
		"\x02\x021\xD4\x03\x02\x02\x023\xD6\x03\x02\x02\x025\xD8\x03\x02\x02\x02" +
		"7\xDD\x03\x02\x02\x029\xDF\x03\x02\x02\x02;\xE2\x03\x02\x02\x02=\xE4\x03" +
		"\x02\x02\x02?\xE6\x03\x02\x02\x02AB\x07e\x02\x02BC\x07q\x02\x02C|\x07" +
		"u\x02\x02DE\x07u\x02\x02EF\x07k\x02\x02F|\x07p\x02\x02GH\x07v\x02\x02" +
		"HI\x07c\x02\x02I|\x07p\x02\x02JK\x07c\x02\x02KL\x07e\x02\x02LM\x07q\x02" +
		"\x02M|\x07u\x02\x02NO\x07c\x02\x02OP\x07u\x02\x02PQ\x07k\x02\x02Q|\x07" +
		"p\x02\x02RS\x07c\x02\x02ST\x07v\x02\x02TU\x07c\x02\x02U|\x07p\x02\x02" +
		"VW\x07c\x02\x02WX\x07d\x02\x02X|\x07u\x02\x02YZ\x07e\x02\x02Z[\x07g\x02" +
		"\x02[\\\x07k\x02\x02\\|\x07n\x02\x02]^\x07h\x02\x02^_\x07n\x02\x02_`\x07" +
		"q\x02\x02`a\x07q\x02\x02a|\x07t\x02\x02bc\x07n\x02\x02cd\x07q\x02\x02" +
		"de\x07i\x02\x02ef\x073\x02\x02f|\x072\x02\x02gh\x07n\x02\x02h|\x07p\x02" +
		"\x02ij\x07g\x02\x02jk\x07z\x02\x02k|\x07r\x02\x02lm\x07u\x02\x02mn\x07" +
		"s\x02\x02no\x07t\x02\x02o|\x07v\x02\x02pq\x07c\x02\x02qr\x07v\x02\x02" +
		"rs\x07c\x02\x02st\x07p\x02\x02t|\x074\x02\x02uv\x07n\x02\x02vw\x07q\x02" +
		"\x02w|\x07i\x02\x02xy\x07r\x02\x02yz\x07q\x02\x02z|\x07y\x02\x02{A\x03" +
		"\x02\x02\x02{D\x03\x02\x02\x02{G\x03\x02\x02\x02{J\x03\x02\x02\x02{N\x03" +
		"\x02\x02\x02{R\x03\x02\x02\x02{V\x03\x02\x02\x02{Y\x03\x02\x02\x02{]\x03" +
		"\x02\x02\x02{b\x03\x02\x02\x02{g\x03\x02\x02\x02{i\x03\x02\x02\x02{l\x03" +
		"\x02\x02\x02{p\x03\x02\x02\x02{u\x03\x02\x02\x02{x\x03\x02\x02\x02|\x04" +
		"\x03\x02\x02\x02}\x7F\x05;\x1E\x02~}\x03\x02\x02\x02\x7F\x80\x03\x02\x02" +
		"\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x89\x03\x02\x02" +
		"\x02\x82\x86\x070\x02\x02\x83\x85\x05;\x1E\x02\x84\x83\x03\x02\x02\x02" +
		"\x85\x88\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02" +
		"\x87\x8A\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x89\x82\x03\x02\x02\x02" +
		"\x89\x8A\x03\x02\x02\x02\x8A\x06\x03\x02\x02\x02\x8B\x8D\x05=\x1F\x02" +
		"\x8C\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8C\x03\x02\x02\x02" +
		"\x8E\x8F\x03\x02\x02\x02\x8F\x9B\x03\x02\x02\x02\x90\x92\x07a\x02\x02" +
		"\x91\x90\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x95\x03\x02\x02\x02" +
		"\x93\x96\x05=\x1F\x02\x94\x96\x05;\x1E\x02\x95\x93\x03\x02\x02\x02\x95" +
		"\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97" +
		"\x98\x03\x02\x02\x02\x98\x9A\x03\x02\x02\x02\x99\x91\x03\x02\x02\x02\x9A" +
		"\x9D\x03\x02\x02\x02\x9B\x99\x03\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C" +
		"\b\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9E\x9F\x05\v\x06\x02\x9F\n" +
		"\x03\x02\x02\x02\xA0\xA4\x07\u03C2\x02\x02\xA1\xA2\x07R\x02\x02\xA2\xA4" +
		"\x07K\x02\x02\xA3\xA0\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA4\f\x03" +
		"\x02\x02\x02\xA5\xA6\x07/\x02\x02\xA6\x0E\x03\x02\x02\x02\xA7\xA8\x07" +
		"-\x02\x02\xA8\x10\x03\x02\x02\x02\xA9\xAA\t\x02\x02\x02\xAA\x12\x03\x02" +
		"\x02\x02\xAB\xAC\t\x03\x02\x02\xAC\x14\x03\x02\x02\x02\xAD\xB1\x07`\x02" +
		"\x02\xAE\xAF\x07,\x02\x02\xAF\xB1\x07,\x02\x02\xB0\xAD\x03\x02\x02\x02" +
		"\xB0\xAE\x03\x02\x02\x02\xB1\x16\x03\x02\x02\x02\xB2\xB3\x07u\x02\x02" +
		"\xB3\xB4\x07s\x02\x02\xB4\xB5\x07t\x02\x02\xB5\xB8\x07v\x02\x02\xB6\xB8" +
		"\x07\u221C\x02\x02\xB7\xB2\x03\x02\x02\x02\xB7\xB6\x03\x02\x02\x02\xB8" +
		"\x18\x03\x02\x02\x02\xB9\xBA\x07\'\x02\x02\xBA\x1A\x03\x02\x02\x02\xBB" +
		"\xBC\x07?\x02\x02\xBC\x1C\x03\x02\x02\x02\xBD\xBE\x07*\x02\x02\xBE\x1E" +
		"\x03\x02\x02\x02\xBF\xC0\x07+\x02\x02\xC0 \x03\x02\x02\x02\xC1\xC2\x07" +
		"]\x02\x02\xC2\"\x03\x02\x02\x02\xC3\xC4\x07_\x02\x02\xC4$\x03\x02\x02" +
		"\x02\xC5\xC6\x07}\x02\x02\xC6&\x03\x02\x02\x02\xC7\xC8\x07\x7F\x02\x02" +
		"\xC8(\x03\x02\x02\x02\xC9\xCA\x07~\x02\x02\xCA*\x03\x02\x02\x02\xCB\xCC" +
		"\x07.\x02\x02\xCC,\x03\x02\x02\x02\xCD\xCE\x07(\x02\x02\xCE.\x03\x02\x02" +
		"\x02\xCF\xD0\x07@\x02\x02\xD00\x03\x02\x02\x02\xD1\xD2\x07@\x02\x02\xD2" +
		"\xD5\x07?\x02\x02\xD3\xD5\x07\u2267\x02\x02\xD4\xD1\x03\x02\x02\x02\xD4" +
		"\xD3\x03\x02\x02\x02\xD52\x03\x02\x02\x02\xD6\xD7\x07>\x02\x02\xD74\x03" +
		"\x02\x02\x02\xD8\xD9\x07\u2266\x02\x02\xD96\x03\x02\x02\x02\xDA\xDB\x07" +
		"#\x02\x02\xDB\xDE\x07?\x02\x02\xDC\xDE\x07\u2262\x02\x02\xDD\xDA\x03\x02" +
		"\x02\x02\xDD\xDC\x03\x02\x02\x02\xDE8\x03\x02\x02\x02\xDF\xE0\x07?\x02" +
		"\x02\xE0\xE1\x07?\x02\x02\xE1:\x03\x02\x02\x02\xE2\xE3\t\x04\x02\x02\xE3" +
		"<\x03\x02\x02\x02\xE4\xE5\t\x05\x02\x02\xE5>\x03\x02\x02\x02\xE6\xE7\t" +
		"\x06\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8\xE9\b \x02\x02\xE9@\x03\x02\x02" +
		"\x02\x11\x02{\x80\x86\x89\x8E\x91\x95\x97\x9B\xA3\xB0\xB7\xD4\xDD\x03" +
		"\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XCalcLexer.__ATN) {
			XCalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XCalcLexer._serializedATN));
		}

		return XCalcLexer.__ATN;
	}

}

